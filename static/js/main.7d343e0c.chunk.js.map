{"version":3,"sources":["Components/Form/Form.js","Components/ConatctsList/ContactsListItem.js","Components/Filter/Filter.js","Components/ConatctsList/ConatctsList.js","Components/App.js","index.js"],"names":["Form","state","name","number","onSubmit","e","preventDefault","props","addContact","setState","onChange","currentTarget","value","className","this","type","pattern","title","required","Component","ContactsListItem","contacts","deleteContact","map","el","id","onClick","Filter","filter","toLowerCase","includes","ContactsList","findContact","App","useState","setContacts","setFilter","useEffect","parsedContacts","JSON","parse","localStorage","getItem","setItem","stringify","userName","userNumber","contactsArr","forEach","push","alert","prevState","uuidv4","target","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7d343e0c.chunk.js","sourcesContent":["import { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class Form extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  onSubmit = e => {\r\n    e.preventDefault();\r\n    this.props.addContact(this.state.name, this.state.number);\r\n    this.setState({ name: '', number: '' });\r\n  };\r\n\r\n  onChange = e => {\r\n    const { name, value } = e.currentTarget;\r\n\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form className=\"form\" onSubmit={this.onSubmit}>\r\n        <label className=\"label\">\r\n          Name{' '}\r\n          <input\r\n            value={this.state.name}\r\n            className=\"label\"\r\n            type=\"text\"\r\n            name=\"name\"\r\n            onChange={this.onChange}\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n          />\r\n        </label>\r\n        <label className=\"label\">\r\n          Phone{' '}\r\n          <input\r\n            value={this.state.number}\r\n            className=\"label\"\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            onChange={this.onChange}\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            required\r\n          />\r\n        </label>\r\n        <button className=\"button\" type=\"submit\">\r\n          Submit\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nForm.propTypes = {\r\n  addContact: PropTypes.func,\r\n};\r\n","// import PropTypes from 'prop-types';\r\n\r\nexport default function ContactsListItem({ contacts, deleteContact }) {\r\n  return contacts.map(el => {\r\n    return (\r\n      <li key={el.id}>\r\n        {el.name}: {el.number}\r\n        <button\r\n          className=\"button\"\r\n          type=\"button\"\r\n          id={el.id}\r\n          onClick={deleteContact}\r\n        >\r\n          Delete\r\n        </button>\r\n      </li>\r\n    );\r\n  });\r\n}\r\n\r\n// ContactsListItem.propTypes = {\r\n//   contacts: PropTypes.arrayOf(PropTypes.object),\r\n// };\r\n","// import PropTypes from 'prop-types';\r\n\r\nexport default function Filter({ contacts, filter }) {\r\n  const findUsers = () => {\r\n    return contacts.filter(el =>\r\n      el.name.toLowerCase().includes(filter.toLowerCase()),\r\n    );\r\n  };\r\n\r\n  return findUsers().map(el => {\r\n    return (\r\n      <li key={el.id}>\r\n        {el.name}: {el.number}\r\n        <button\r\n          className=\"button\"\r\n          type=\"button\"\r\n          id={el.id}\r\n          onClick={this.props.deleteContact}\r\n        >\r\n          Delete\r\n        </button>\r\n      </li>\r\n    );\r\n  });\r\n}\r\n\r\nclass oldFilter {\r\n  findUsers = () => {\r\n    const { contacts, filter } = this.props;\r\n\r\n    return contacts.filter(el =>\r\n      el.name.toLowerCase().includes(filter.toLowerCase()),\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return this.findUsers().map(el => {\r\n      return (\r\n        <li key={el.id}>\r\n          {el.name}: {el.number}\r\n          <button\r\n            className=\"button\"\r\n            type=\"button\"\r\n            id={el.id}\r\n            onClick={this.props.deleteContact}\r\n          >\r\n            Delete\r\n          </button>\r\n        </li>\r\n      );\r\n    });\r\n  }\r\n}\r\n\r\n// Filter.propTypes = { state: PropTypes.object };\r\n","// import PropTypes from 'prop-types';\r\nimport ContactsListItem from './ContactsListItem';\r\nimport Filter from '../Filter/Filter';\r\n\r\nexport default function ContactsList({\r\n  filter,\r\n  contacts,\r\n  findContact,\r\n  deleteContact,\r\n}) {\r\n  const onChange = e => {\r\n    findContact(e.currentTarget.value);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h3>Find contacts by name</h3>\r\n      <input\r\n        type=\"text\"\r\n        name=\"name\"\r\n        onChange={onChange}\r\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n        required\r\n      />\r\n      <ul>\r\n        {!filter ? (\r\n          <ContactsListItem contacts={contacts} deleteContact={deleteContact} />\r\n        ) : (\r\n          <Filter\r\n            filter={filter}\r\n            contacts={contacts}\r\n            deleteContact={deleteContact}\r\n          />\r\n        )}\r\n      </ul>\r\n    </>\r\n  );\r\n}\r\n\r\n// ContactsList.propTypes = {\r\n//   state: PropTypes.object,\r\n//   findContact: PropTypes.func,\r\n//   deleteContact: PropTypes.func,\r\n// };\r\n","import { useState, useEffect } from 'react';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport Form from './Form/Form';\r\nimport ContactsList from './ConatctsList/ConatctsList';\r\nimport './styles.css';\r\n\r\nexport default function App() {\r\n  const [contacts, setContacts] = useState([]);\r\n  const [filter, setFilter] = useState('');\r\n\r\n  useEffect(() => {\r\n    const parsedContacts = JSON.parse(localStorage.getItem('contacts'));\r\n    if (parsedContacts) {\r\n      setContacts(parsedContacts);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('contacts', JSON.stringify(contacts));\r\n  }, [contacts]);\r\n\r\n  const addContact = (userName, userNumber) => {\r\n    const contactsArr = [];\r\n\r\n    contacts.forEach(el => {\r\n      contactsArr.push(el.name, el.number);\r\n    });\r\n\r\n    if (contactsArr.includes(userNumber || userName.toLowerCase())) {\r\n      return alert('This person or number is already in contacts');\r\n    } else {\r\n      setContacts(prevState => [\r\n        ...prevState,\r\n        { id: uuidv4(), name: userName, number: userNumber },\r\n      ]);\r\n    }\r\n  };\r\n\r\n  const findContact = name => {\r\n    setFilter(name);\r\n  };\r\n\r\n  const deleteContact = e => {\r\n    setContacts(prevState => prevState.filter(el => el.id !== e.target.id));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Phonebook</h1>\r\n      <Form addContact={addContact} />\r\n      <h2>Contacts</h2>\r\n      <ContactsList\r\n        filter={filter}\r\n        contacts={contacts}\r\n        findContact={findContact}\r\n        deleteContact={deleteContact}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './Components/App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}