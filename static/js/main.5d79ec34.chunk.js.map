{"version":3,"sources":["Components/Form/Form.js","Components/ConatctsList/ContactsListItem.js","Components/Filter/Filter.js","Components/ConatctsList/ConatctsList.js","Components/App.js","index.js"],"names":["Form","addContact","useState","name","setName","number","setNumber","className","onSubmit","e","preventDefault","value","type","onChange","target","pattern","title","required","ContactsListItem","contacts","deleteContact","map","el","id","onClick","Filter","filter","toLowerCase","includes","ContactsList","findContact","currentTarget","App","setContacts","setFilter","useEffect","parsedContacts","JSON","parse","localStorage","getItem","setItem","stringify","userName","userNumber","contactsArr","forEach","push","alert","prevState","uuidv4","trim","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5d79ec34.chunk.js","sourcesContent":["import { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function Form({ addContact }) {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const onSubmit = e => {\n    e.preventDefault();\n    addContact(name, number);\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className=\"form\" onSubmit={onSubmit}>\n      <label className=\"label\">\n        Name{' '}\n        <input\n          value={name}\n          className=\"label\"\n          type=\"text\"\n          name=\"name\"\n          onChange={e => {\n            setName(e.target.value);\n          }}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n        />\n      </label>\n      <label className=\"label\">\n        Phone{' '}\n        <input\n          value={number}\n          className=\"label\"\n          type=\"tel\"\n          name=\"number\"\n          onChange={e => {\n            setNumber(e.target.value);\n          }}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n        />\n      </label>\n      <button className=\"button\" type=\"submit\">\n        Submit\n      </button>\n    </form>\n  );\n}\n\nForm.propTypes = {\n  addContact: PropTypes.func,\n};\n","import PropTypes from 'prop-types';\r\n\r\nexport default function ContactsListItem({ contacts, deleteContact }) {\r\n  return contacts.map(el => {\r\n    return (\r\n      <li key={el.id}>\r\n        {el.name}: {el.number}\r\n        <button\r\n          className=\"button\"\r\n          type=\"button\"\r\n          id={el.id}\r\n          onClick={deleteContact}\r\n        >\r\n          Delete\r\n        </button>\r\n      </li>\r\n    );\r\n  });\r\n}\r\n\r\nContactsListItem.propTypes = {\r\n  contacts: PropTypes.arrayOf(PropTypes.object),\r\n  deleteContact: PropTypes.func,\r\n};\r\n","import PropTypes from 'prop-types';\r\n\r\nexport default function Filter({ contacts, filter, deleteContact }) {\r\n  const findUsers = () => {\r\n    return contacts.filter(el =>\r\n      el.name.toLowerCase().includes(filter.toLowerCase()),\r\n    );\r\n  };\r\n\r\n  return findUsers().map(el => {\r\n    return (\r\n      <li key={el.id}>\r\n        {el.name}: {el.number}\r\n        <button\r\n          className=\"button\"\r\n          type=\"button\"\r\n          id={el.id}\r\n          onClick={deleteContact}\r\n        >\r\n          Delete\r\n        </button>\r\n      </li>\r\n    );\r\n  });\r\n}\r\n\r\nFilter.propTypes = {\r\n  filter: PropTypes.string,\r\n  contacts: PropTypes.arrayOf(PropTypes.object),\r\n  deleteContact: PropTypes.func,\r\n};\r\n","import PropTypes from 'prop-types';\r\nimport ContactsListItem from './ContactsListItem';\r\nimport Filter from '../Filter/Filter';\r\n\r\nexport default function ContactsList({\r\n  filter,\r\n  contacts,\r\n  findContact,\r\n  deleteContact,\r\n}) {\r\n  const onChange = e => {\r\n    findContact(e.currentTarget.value);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h3>Find contacts by name</h3>\r\n      <input\r\n        type=\"text\"\r\n        name=\"name\"\r\n        onChange={onChange}\r\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n        required\r\n      />\r\n      <ul>\r\n        {!filter ? (\r\n          <ContactsListItem contacts={contacts} deleteContact={deleteContact} />\r\n        ) : (\r\n          <Filter\r\n            filter={filter}\r\n            contacts={contacts}\r\n            deleteContact={deleteContact}\r\n          />\r\n        )}\r\n      </ul>\r\n    </>\r\n  );\r\n}\r\n\r\nContactsList.propTypes = {\r\n  filter: PropTypes.string,\r\n  findContact: PropTypes.func,\r\n};\r\n","import { useState, useEffect } from 'react';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport Form from './Form/Form';\r\nimport ContactsList from './ConatctsList/ConatctsList';\r\nimport './styles.css';\r\n\r\nexport default function App() {\r\n  const [contacts, setContacts] = useState([]);\r\n  const [filter, setFilter] = useState('');\r\n\r\n  useEffect(() => {\r\n    const parsedContacts = JSON.parse(localStorage.getItem('contacts'));\r\n    if (parsedContacts) {\r\n      setContacts(parsedContacts);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('contacts', JSON.stringify(contacts));\r\n  }, [contacts]);\r\n\r\n  const addContact = (userName, userNumber) => {\r\n    const contactsArr = [];\r\n\r\n    contacts.forEach(el => {\r\n      contactsArr.push(el.name, el.number);\r\n    });\r\n\r\n    if (contactsArr.includes(userNumber || userName.toLowerCase())) {\r\n      return alert('This person or number is already in contacts');\r\n    } else {\r\n      setContacts(prevState => [\r\n        ...prevState,\r\n        { id: uuidv4(), name: userName, number: userNumber },\r\n      ]);\r\n    }\r\n  };\r\n\r\n  const findContact = name => {\r\n    setFilter(name.trim());\r\n  };\r\n\r\n  const deleteContact = e => {\r\n    setContacts(prevState => prevState.filter(el => el.id !== e.target.id));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Phonebook</h1>\r\n      <Form addContact={addContact} />\r\n      <h2>Contacts</h2>\r\n      <ContactsList\r\n        filter={filter}\r\n        contacts={contacts}\r\n        findContact={findContact}\r\n        deleteContact={deleteContact}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}